743. Network Delay Time
--------------------------------------------------------------------------------------
You are given a network of n nodes, labeled from 1 to n. You are also given times, a list of travel times as directed edges times[i] = (ui, vi, wi), where ui is the source node, vi is the target node, and wi is the time it takes for a signal to travel from source to target.

We will send a signal from a given node k. Return the time it takes for all the n nodes to receive the signal. If it is impossible for all the n nodes to receive the signal, return -1.
--------------------------------------------------------------------------------------

class Solution {
public:
    int networkDelayTime(vector<vector<int>>& times, int n, int k) 
    {
        vector<pair<int,int>>adj[n+1];
        for(int i=0;i<times.size();i++)
        {
            int src=times[i][0];
            int des=times[i][1];
            int val=times[i][2];
            adj[src].push_back({val,des});
        }
        // for(int i=1;i<=n;i++)
        // {
        //     cout<<i<<"  ";
        //    for(auto x: adj[i])
        //     {
        //     cout<<x.first<<"  "<<x.second<<"   ";
        //      }
        //     cout<<endl;
        // }
        vector<int>dis(n+1,INT_MAX);
        dis[0]=0;
        dis[k]=0;
        set<pair<int,int>>s;
        s.insert({dis[k],k});
        while(!s.empty())
        {
            auto it=s.begin();
            int node=it->second;
            int d=it->first;
            s.erase(it);
            for(auto x:adj[node])
            {
                int cv=x.first;
                int cn=x.second;
                if(dis[node]+cv<dis[cn])
                {
                    auto y=s.find({dis[cn],cn});
                    if(y!=s.end())
                    {
                        s.erase(y);
                    }
                    dis[cn]=dis[node]+cv;
                    s.insert({dis[cn],cn});
                }
                
            }
        }
        int res=INT_MIN;
        for(int i=1;i<=n;i++)
        {
            if(dis[i]==INT_MAX)
            {
                return -1;
            }
            if(res<dis[i])
            {
                res=dis[i];
            }
        }
        return res;
    }
};

